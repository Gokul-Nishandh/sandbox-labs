nc -vz 192.168.207.6 5901
‚Üí Connection succeeded!


docker exec -it guacd sh
/ $ nc -vz localhost 5901
Connection to localhost (127.0.0.1) 5901 port [tcp/*] succeeded!
/ $ 


docker logs guacd



ps aux | grep qemu

sudo kill -9 <pid>

docker exec -it guac-db mysql -u guacamole_user -p

Perfect ‚Äî your logs are **super helpful**, and now we can pinpoint the issue exactly.
Everything (Docker, DB, Guacamole web, authentication) is fine ‚Äî the only problem is **Guacd cannot reach your VNC servers at `192.168.56.11` and `192.168.56.12`**.

---

### üß† Root Cause

Your database currently says:

```
node_1 ‚Üí hostname = 192.168.56.11
node_2 ‚Üí hostname = 192.168.56.12
```

But your **`guacd` container** lives in the **Docker bridge network (172.19.0.0/16)**.
That means `guacd` can **reach `172.19.0.1` (the host)**, but **not `192.168.56.x`**, which are likely your host-only or VirtualBox private network IPs.

So even though your VNC servers are reachable from your host, they‚Äôre invisible to the container.

---

### ‚úÖ Fix: Change VNC Hostnames in DB to `172.19.0.1`

Run this command to update both connections to use the host IP reachable from Docker:

```bash
docker exec -it guac-db mysql -uguacamole_user -pguacamole guacamole_db -e "
UPDATE guacamole_connection_parameter
SET parameter_value='172.19.0.1'
WHERE parameter_name='hostname';
"
```

Then verify:

```bash
docker exec -it guac-db mysql -uguacamole_user -pguacamole guacamole_db -e "
SELECT connection_id, parameter_name, parameter_value
FROM guacamole_connection_parameter
WHERE parameter_name='hostname';
"
```

‚úÖ Expected output:

```
| connection_id | parameter_name | parameter_value |
|---------------|----------------|-----------------|
| 1             | hostname       | 172.19.0.1      |
| 2             | hostname       | 172.19.0.1      |
```

---

### ‚öôÔ∏è Restart and Test

1. Restart the Guacamole web app to reload config:

   ```bash
   docker restart guac
   ```

2. Wait ~10 seconds, then open
   üëâ **[http://localhost:8080/guacamole](http://localhost:8080/guacamole)**

3. Log in as `guacadmin` and try both:

   * **node_1** ‚Üí should now connect to `172.19.0.1:5901`
   * **node_2** ‚Üí should now connect to `172.19.0.1:5902`

---

### üß© Optional Verification (Before Trying GUI)

You can confirm from inside guacd that these now work:

```bash
docker exec -it guacd sh
nc -vz 172.19.0.1 5901
nc -vz 172.19.0.1 5902
exit
```

‚úÖ Both should succeed (you already confirmed earlier they do).

---

### üöÄ Summary

| Step | What it Does                 | Command                                     |
| ---- | ---------------------------- | ------------------------------------------- |
| 1    | Update hostname in DB        | `UPDATE guacamole_connection_parameter ...` |
| 2    | Restart guac container       | `docker restart guac`                       |
| 3    | Test GUI again               | visit `http://localhost:8080/guacamole`     |
| 4    | (Optional) Verify from guacd | `nc -vz 172.19.0.1 5901`                    |

---

Once you do this, Guacamole should finally connect properly üéØ
Would you like me to give you a **single shell script** (`debug_guac.sh`) that runs all the key checks (DB values, network, nc test, log summary) in one go next time?
